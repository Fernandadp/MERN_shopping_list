 -In package.json :
 "scripts": nodemon is created to be able to see changes without having to restart the 
 server everytime I make a server side change.
 -In server.js: 
  + express is the backend framework.
  + mongoose is the orm to interact with de DB.
  + bodyParser gets and pushes requests
- Initialize express into a variable called App.
- Create a DB on mLAb and then bring it into the werver.js file.
- Connect to Mongo using Mongoose (mongoose.connect(db)). This is promise based, 
so we use .then to send a message once the db is connected.
- If there is an erro, .catch will send a message.
- const port = variable for the port (Heroku process.env.PORT) or port 5000.
- To run nodemon, go to the console and type "npm run server", 
because in our package.json we created a script "server" which runs nodemon (to be able to 
continuosly watch the server).
- API, we want to be able to get requests from our front-end and fetch and post 
items from and to our DB and to delete them.
- When using Mongoose is good to have a model. It contains an Item, and first
we need to bring Mongoose into it.


Front-end
- Create client folder, where the front end will go.
- cd into this client folder.
- excute create-react-app . (with the .)
- a new Package json will be created, which is totally different from the previous one, as this
takes care of the front end (the other one does on the back end).
- In package json we need to define a proxy element, so that we don't need to write 
the whole address when acessing the app. This proxy will be our Back end server 
(http://localhost:5000)
- To be able to run both servers (front and back ends) simultaneously, without having
to use two comman lines, we will use Concurrently.
- Go back to the main folder in the terminal.   
- Open the back end's package json file, and check if Concurrently is already installed.
If is not there (under dependencies), run 'npm install Concurrently'.
- On the back end' package json, add a script "client": "npm start --prefix client"
(anothe option is to write "cd client && npm start" ). This will run the client side server.
- Then add another script, "dev", which will run both front and back end servers.
("dev": "concurrently \"npm run server\" \"npm run client\""). To use this on the terminal:
"npm run dev"
- Add another script "client-install": "npm install --prefix client" (?).
- To start both servers, on the terminal -> "npm run dev".